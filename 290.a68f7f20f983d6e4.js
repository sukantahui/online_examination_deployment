"use strict";(self.webpackChunkcoder_tutorial=self.webpackChunkcoder_tutorial||[]).push([[290],{7290:(b,a,n)=>{n.r(a),n.d(a,{PythonTutorialListModule:()=>Z});var l=n(6895),o=n(6264),e=n(4650),s=n(2244);const u=[{path:"",component:(()=>{class t{}return t.\u0275fac=function(i){return new(i||t)},t.\u0275cmp=e.Xpm({type:t,selectors:[["app-python-tutorial-list"]],decls:1397,vars:0,consts:[[1,"col-xl-11","col-sm-6","col-xs-3"],["label","Python Lists"],[1,"p-2"],[1,"bg"],[1,"table"],[1,"bg2"],["label","Access List Items"],["label","Change List Items"],["label","Add List Items"],["label","Remove List Items"],[1,"large"],["label","Loop Lists"],["label","List Comprehension"],[1,"fontsize"],[1,"lar"],["label","Sort Lists"],["label","Copy Lists"],["label","Join lists"],["label","List Methods"],[1,"border"],[1,"listM"]],template:function(i,_){1&i&&(e.TgZ(0,"div",0)(1,"mat-tab-group")(2,"mat-tab",1)(3,"div",2)(4,"h3",3)(5,"b")(6,"pre")(7,"code"),e._uU(8,'\n                    mylist = [ "apple", "banana", "cherry" ]\n                    '),e.qZA()()()(),e._UZ(9,"br"),e.TgZ(10,"h2"),e._uU(11,"List"),e.qZA(),e._uU(12," Lists are used to store multiple items in a single variable."),e._UZ(13,"br")(14,"br"),e._uU(15," Lists are one of 4 built-in data types in Python used to store collections of data, the other 3 are "),e.TgZ(16,"u"),e._uU(17,"Tuple"),e.qZA(),e._uU(18,", "),e.TgZ(19,"u"),e._uU(20,"Set"),e.qZA(),e._uU(21,", and "),e.TgZ(22,"u"),e._uU(23,"Dictionary"),e.qZA(),e._uU(24,", all with different qualities and usage."),e._UZ(25,"br")(26,"br"),e._uU(27," Lists are created using square brackets:"),e._UZ(28,"br")(29,"br"),e.TgZ(30,"table",4)(31,"tbody")(32,"tr",5)(33,"h3")(34,"b"),e._uU(35,"EXAMPLE"),e.qZA(),e._UZ(36,"br"),e._uU(37,"Create a List:"),e.qZA()(),e.TgZ(38,"tr")(39,"h3",3)(40,"b")(41,"pre")(42,"code"),e._uU(43,'\n                                thislist = [ "apple", "banana", "cherry" ]\n                                print ( thislist )\n                                '),e.qZA()()()()()()(),e._UZ(44,"br"),e.TgZ(45,"h2"),e._uU(46,"List Items"),e.qZA(),e._uU(47," List items are ordered, changeable, and allow duplicate values."),e._UZ(48,"br")(49,"br"),e._uU(50," List items are indexed, the first item has index "),e.TgZ(51,"code"),e._uU(52,"[0]"),e.qZA(),e._uU(53,", the second item has index "),e.TgZ(54,"code"),e._uU(55,"[1]"),e.qZA(),e._uU(56," etc. "),e._UZ(57,"br")(58,"br"),e.TgZ(59,"h2"),e._uU(60,"Ordered"),e.qZA(),e._uU(61," When we say that lists are ordered, it means that the items have a defined order, and that order will not change."),e._UZ(62,"br")(63,"br"),e._uU(64," If you add new items to a list, the new items will be placed at the end of the list. "),e._UZ(65,"br")(66,"br"),e.TgZ(67,"h2"),e._uU(68,"Changeable"),e.qZA(),e._uU(69," The list is changeable, meaning that we can change, add, and remove items in a list after it has been created. "),e._UZ(70,"br")(71,"br"),e.TgZ(72,"h2"),e._uU(73,"Allow Duplicates"),e.qZA(),e._uU(74," Since lists are indexed, lists can have items with the same value:"),e._UZ(75,"br")(76,"br")(77,"br"),e.TgZ(78,"table",4)(79,"tbody")(80,"tr",5)(81,"h3")(82,"b"),e._uU(83,"EXAMPLE"),e.qZA(),e._UZ(84,"br"),e._uU(85,"Lists allow duplicate values:"),e.qZA()(),e.TgZ(86,"tr")(87,"h3",3)(88,"b")(89,"pre")(90,"code"),e._uU(91,'\n                                thislist = [ "apple", "banana", "cherry", "apple", "cherry" ]\n                                print ( thislist )\n                                '),e.qZA()()()()()()(),e._UZ(92,"br"),e.TgZ(93,"h2"),e._uU(94,"List length"),e.qZA(),e._uU(95," To determine how many items a list has, use the "),e.TgZ(96,"code"),e._uU(97,"len( )"),e.qZA(),e._uU(98," function:"),e._UZ(99,"br")(100,"br"),e.TgZ(101,"table",4)(102,"tbody")(103,"tr",5)(104,"h3")(105,"b"),e._uU(106,"EXAMPLE"),e.qZA(),e._UZ(107,"br"),e._uU(108,"Print the number of items in the list:"),e.qZA()(),e.TgZ(109,"tr")(110,"h3",3)(111,"b")(112,"pre")(113,"code"),e._uU(114,'\n                                thislist = [ "apple", "banana", "cherry" ]\n                                print (len ( thislist ) )\n                                '),e.qZA()()()()()()(),e._UZ(115,"br"),e.TgZ(116,"h2"),e._uU(117,"List Items - Data Types"),e.qZA(),e._uU(118," List items can be of any data type:"),e._UZ(119,"br")(120,"br"),e.TgZ(121,"table",4)(122,"tbody")(123,"tr",5)(124,"h3")(125,"b"),e._uU(126,"EXAMPLE"),e.qZA(),e._UZ(127,"br"),e._uU(128,"String, int and boolean data types:"),e.qZA()(),e.TgZ(129,"tr")(130,"h3",3)(131,"b")(132,"pre")(133,"code"),e._uU(134,'\n                                list1 = [ "apple", "banana", "cherry" ]'),e._UZ(135,"br"),e._uU(136,"\n                                list2 = [ 1, 5, 7, 9, 3 ]"),e._UZ(137,"br"),e._uU(138,"\n                                list3 = [ True, False, False ]\n                                "),e.qZA()()()()()()(),e._uU(139," A list can contain different data types: "),e._UZ(140,"br")(141,"br"),e.TgZ(142,"table",4)(143,"tbody")(144,"tr",5)(145,"h3")(146,"b"),e._uU(147,"EXAMPLE"),e.qZA(),e._UZ(148,"br"),e._uU(149,"A list with strings, integers and boolean values:"),e.qZA()(),e.TgZ(150,"tr")(151,"h3",3)(152,"b")(153,"pre")(154,"code"),e._uU(155,'\n                                list1 = [ "abc", 34, True, 40, "male" ]\n                                '),e.qZA()()()()()()(),e._UZ(156,"br"),e.TgZ(157,"h2"),e._uU(158,"Type()"),e.qZA(),e._uU(159," From Python's perspective, lists are defined as objects with the data type 'list': "),e._UZ(160,"br")(161,"br"),e.TgZ(162,"table",4)(163,"tbody")(164,"tr",5)(165,"h3")(166,"b"),e._uU(167,"EXAMPLE"),e.qZA(),e._UZ(168,"br"),e._uU(169,"What is the data type of a list?"),e.qZA()(),e.TgZ(170,"tr")(171,"h3",3)(172,"b")(173,"pre")(174,"code"),e._uU(175,'\n                                    mylist = [ "apple", "banana", "cherry" ]\n                                    print ( type ( mylist ) )\n                                    '),e.qZA()()()()()()(),e._UZ(176,"br"),e.TgZ(177,"h2"),e._uU(178,"The List( ) Constructor"),e.qZA(),e._uU(179," It is also possible to use the "),e.TgZ(180,"code"),e._uU(181,"list()"),e.qZA(),e._uU(182," constructor when creating a new list."),e._UZ(183,"br")(184,"br"),e.TgZ(185,"table",4)(186,"tbody")(187,"tr",5)(188,"h3")(189,"b"),e._uU(190,"EXAMPLE"),e.qZA(),e._UZ(191,"br"),e._uU(192,"Using the "),e.TgZ(193,"code"),e._uU(194,"list()"),e.qZA(),e._uU(195," constructor to make a List:"),e.qZA()(),e.TgZ(196,"tr")(197,"h3",3)(198,"b")(199,"pre")(200,"code"),e._uU(201,'\n                                thislist = list ( ( "apple", "banana", "cherry" ) ) # note the double round-brackets\n                                print ( thislist )\n                                '),e.qZA()()()()()()(),e._UZ(202,"br"),e.TgZ(203,"h2"),e._uU(204,"Python Collections ( Arrays )"),e.qZA(),e._uU(205," There are four collection data types in the Python programming language: "),e.TgZ(206,"ul")(207,"li"),e._uU(208,"List is a collection which is ordered and changeable. Allows duplicate members."),e.qZA(),e.TgZ(209,"li"),e._uU(210,"Tuple is a collection which is ordered and unchangeable. Allows duplicate members."),e.qZA(),e.TgZ(211,"li"),e._uU(212,"Set is a collection which is unordered, unchangeable*, and unindexed. No duplicate members."),e.qZA(),e.TgZ(213,"li"),e._uU(214,"Dictionary is a collection which is ordered** and changeable. No duplicate members."),e.qZA()(),e._uU(215," When choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security. "),e.qZA()(),e.TgZ(216,"mat-tab",6)(217,"div",2)(218,"h2"),e._uU(219,"Access Items"),e.qZA(),e._uU(220," List items are indexed and you can access them by referring to the index number: "),e._UZ(221,"br")(222,"br"),e.TgZ(223,"table",4)(224,"tbody")(225,"tr",5)(226,"h3")(227,"b"),e._uU(228,"EXAMPLE"),e.qZA(),e._UZ(229,"br"),e._uU(230,"Print the second item of the list:"),e.qZA()(),e.TgZ(231,"tr")(232,"h3",3)(233,"b")(234,"pre")(235,"code"),e._uU(236,'\n                                thislist = [ "apple", "banana", "cherry" ]\n                                print ( thislist [ 1 ] )\n                            '),e.qZA()()()()()()(),e._UZ(237,"br"),e.TgZ(238,"h2"),e._uU(239,"Negative Indexing"),e.qZA(),e._uU(240," Negative indexing means start from the end "),e._UZ(241,"br")(242,"br"),e.TgZ(243,"code"),e._uU(244,"-1"),e.qZA(),e._uU(245," refers to the last item, "),e.TgZ(246,"code"),e._uU(247,"-2"),e.qZA(),e._uU(248," refers to the second last item etc. "),e._UZ(249,"br")(250,"br"),e.TgZ(251,"table",4)(252,"tbody")(253,"tr",5)(254,"h3")(255,"b"),e._uU(256,"EXAMPLE"),e.qZA(),e._UZ(257,"br"),e._uU(258,"Print the last item of the list:"),e.qZA()(),e.TgZ(259,"tr")(260,"h3",3)(261,"b")(262,"pre")(263,"code"),e._uU(264,'\n                                thislist = [ "apple", "banana", "cherry" ]\n                                print ( thislist [ -1 ] )\n                            '),e.qZA()()()()()()(),e._UZ(265,"br"),e.TgZ(266,"h2"),e._uU(267,"Range of Indexes"),e.qZA(),e._uU(268," You can specify a range of indexes by specifying where to start and where to end the range. "),e._UZ(269,"br")(270,"br"),e._uU(271," When specifying a range, the return value will be a new list with the specified items. "),e._UZ(272,"br")(273,"br"),e.TgZ(274,"table",4)(275,"tbody")(276,"tr",5)(277,"h3")(278,"b"),e._uU(279,"EXAMPLE"),e.qZA(),e._UZ(280,"br"),e._uU(281," Return the third, fourth, and fifth item:"),e.qZA()(),e.TgZ(282,"tr")(283,"h3",3)(284,"b")(285,"pre")(286,"code"),e._uU(287,'\n                                thislist = [ "apple", "banana", "cherry", "orange", "kiwi", "melon", "mango" ]\n                                print ( thislist [ 2:5 ] )\n                            '),e.qZA()()()()()()(),e._UZ(288,"br"),e._uU(289," By leaving out the start value, the range will start at the first item: "),e._UZ(290,"br")(291,"br"),e.TgZ(292,"table",4)(293,"tbody")(294,"tr",5)(295,"h3")(296,"b"),e._uU(297,"EXAMPLE"),e.qZA(),e._UZ(298,"br"),e._uU(299,'This example returns the items from the beginning to, but NOT including, "kiwi":'),e.qZA()(),e.TgZ(300,"tr")(301,"h3",3)(302,"b")(303,"pre")(304,"code"),e._uU(305,'\n                                thislist = [ "apple", "banana", "cherry", "orange", "kiwi", "melon", "mango" ]\n                                print ( thislist [ :4 ] )\n                            '),e.qZA()()()()()()(),e._UZ(306,"br"),e._uU(307," By leaving out the end value, the range will go on to the end of the list: "),e._UZ(308,"br")(309,"br"),e.TgZ(310,"table",4)(311,"tbody")(312,"tr",5)(313,"h3")(314,"b"),e._uU(315,"EXAMPLE"),e.qZA(),e._UZ(316,"br"),e._uU(317,'This example returns the items from "cherry" to the end:'),e.qZA()(),e.TgZ(318,"tr")(319,"h3",3)(320,"b")(321,"pre")(322,"code"),e._uU(323,'\n                                thislist = [ "apple", "banana", "cherry", "orange", "kiwi", "melon", "mango" ]\n                                print ( thislist [ 2: ] )\n                            '),e.qZA()()()()()()(),e.TgZ(324,"h2"),e._uU(325,"Range of Negative Indexes"),e.qZA(),e._uU(326," Specify negative indexes if you want to start the search from the end of the list: "),e._UZ(327,"br")(328,"br"),e.TgZ(329,"table",4)(330,"tbody")(331,"tr",5)(332,"h3")(333,"b"),e._uU(334,"EXAMPLE"),e.qZA(),e._UZ(335,"br"),e._uU(336,'This example returns the items from "orange" (-4) to, but NOT including "mango" (-1):'),e.qZA()(),e.TgZ(337,"tr")(338,"h3",3)(339,"b")(340,"pre")(341,"code"),e._uU(342,'\n                                thislist = [ "apple", "banana", "cherry", "orange", "kiwi", "melon", "mango" ]\n                                print ( thislist [ -4:-1 ] )\n                            '),e.qZA()()()()()()(),e._UZ(343,"br"),e.TgZ(344,"h2"),e._uU(345,"Check if Item Exists"),e.qZA(),e._uU(346," To determine if a specified item is present in a list use the in keyword: "),e._UZ(347,"br")(348,"br"),e.TgZ(349,"table",4)(350,"tbody")(351,"tr",5)(352,"h3")(353,"b"),e._uU(354,"EXAMPLE"),e.qZA(),e._UZ(355,"br"),e._uU(356,'Check if "apple" is present '),e.TgZ(357,"code"),e._uU(358,"in"),e.qZA(),e._uU(359," the list:"),e.qZA()(),e.TgZ(360,"tr")(361,"h3",3)(362,"b")(363,"pre")(364,"code"),e._uU(365,'\n                                thislist = [ "apple", "banana", "cherry" ]'),e._UZ(366,"br"),e._uU(367,'\n                                if "apple" in thislist:'),e._UZ(368,"br"),e._uU(369,"\n                                print ( \"Yes, 'apple' is in the fruits list\" )\n                            "),e.qZA()()()()()()()()(),e.TgZ(370,"mat-tab",7)(371,"div",2)(372,"h2"),e._uU(373,"Change Item Value"),e.qZA(),e._uU(374," To change the value of a specific item, refer to the index number: "),e._UZ(375,"br")(376,"br"),e.TgZ(377,"table",4)(378,"tbody")(379,"tr",5)(380,"h3")(381,"b"),e._uU(382,"EXAMPLE"),e.qZA(),e._UZ(383,"br"),e._uU(384,"Change the second item:"),e.qZA()(),e.TgZ(385,"tr")(386,"h3",3)(387,"b")(388,"pre")(389,"code"),e._uU(390,'\n                                thislist = [ "apple", "banana", "cherry" ]\n                                thislist [ 1 ] = "blackcurrant"\n                                print ( thislist )\n                            '),e.qZA()()()()()()(),e._UZ(391,"br"),e.TgZ(392,"h2"),e._uU(393,"Change a Range of Item Values"),e.qZA(),e._uU(394," To change the value of items within a specific range, define a list with the new values, and refer to the range of index numbers where you want to insert the new values: "),e._UZ(395,"br")(396,"br"),e.TgZ(397,"table",4)(398,"tbody")(399,"tr",5)(400,"h3")(401,"b"),e._uU(402,"EXAMPLE"),e.qZA(),e._UZ(403,"br"),e._uU(404,'Change the values "banana" and "cherry" with the values "blackcurrant" and "watermelon":'),e.qZA()(),e.TgZ(405,"tr")(406,"h3",3)(407,"b")(408,"pre")(409,"code"),e._uU(410,'\n                                thislist = ["apple", "banana", "cherry", "orange", "kiwi", "mango"]\n                                thislist[1:3] = ["blackcurrant", "watermelon"]\n                                print(thislist)\n                            '),e.qZA()()()()()()(),e._UZ(411,"br"),e._uU(412," If you insert more items than you replace, the new items will be inserted where you specified, and "),e._UZ(413,"br"),e._uU(414,"the remaining items will move accordingly: "),e._UZ(415,"br")(416,"br"),e.TgZ(417,"table",4)(418,"tbody")(419,"tr",5)(420,"h3")(421,"b"),e._uU(422,"EXAMPLE"),e.qZA(),e._UZ(423,"br"),e._uU(424,"Change the second value by replacing it with two new values:"),e.qZA()(),e.TgZ(425,"tr")(426,"h3",3)(427,"b")(428,"pre")(429,"code"),e._uU(430,'\n                                thislist = [ "apple", "banana", "cherry" ]\n                                thislist [ 1:2 ] = ["blackcurrant", "watermelon"]\n                                print(thislist)\n                            '),e.qZA()()()()()()(),e._UZ(431,"br"),e._uU(432," If you insert less items than you replace, the new items will be inserted where you specified, and the remaining items will move accordingly: "),e._UZ(433,"br")(434,"br"),e.TgZ(435,"table",4)(436,"tbody")(437,"tr",5)(438,"h3")(439,"b"),e._uU(440,"EXAMPLE"),e.qZA(),e._UZ(441,"br"),e._uU(442,"Change the second and third value by replacing it with one value:"),e.qZA()(),e.TgZ(443,"tr")(444,"h3",3)(445,"b")(446,"pre")(447,"code"),e._uU(448,'\n                                thislist = [ "apple", "banana", "cherry" ]\n                                thislist [ 1:3 ] = [ "watermelon" ]\n                                print ( thislist )\n                            '),e.qZA()()()()()()(),e._UZ(449,"br"),e.TgZ(450,"h2"),e._uU(451,"Insert Items"),e.qZA(),e._uU(452," To insert a new list item, without replacing any of the existing values, we can use the "),e.TgZ(453,"code"),e._uU(454,"insert()"),e.qZA(),e._uU(455," method. "),e._UZ(456,"br")(457,"br"),e._uU(458," The "),e.TgZ(459,"code"),e._uU(460,"insert()"),e.qZA(),e._uU(461," method inserts an item at the specified index: "),e._UZ(462,"br")(463,"br"),e.TgZ(464,"table",4)(465,"tbody")(466,"tr",5)(467,"h3")(468,"b"),e._uU(469,"EXAMPLE"),e.qZA(),e._UZ(470,"br"),e._uU(471,'Insert "watermelon" as the third item:'),e.qZA()(),e.TgZ(472,"tr")(473,"h3",3)(474,"b")(475,"pre")(476,"code"),e._uU(477,'\n                                thislist = ["apple", "banana", "cherry"]\n                                thislist.insert(2, "watermelon")\n                                print(thislist)\n                            '),e.qZA()()()()()()()()(),e.TgZ(478,"mat-tab",8)(479,"div",2)(480,"h2"),e._uU(481,"Append Items"),e.qZA(),e._uU(482," To add an item to the end of the list, use the "),e.TgZ(483,"code"),e._uU(484,"append()"),e.qZA(),e._uU(485," method: "),e._UZ(486,"br")(487,"br"),e.TgZ(488,"table",4)(489,"tbody")(490,"tr",5)(491,"h3")(492,"b"),e._uU(493,"EXAMPLE"),e.qZA(),e._UZ(494,"br"),e._uU(495,"Using the "),e.TgZ(496,"code"),e._uU(497,"append()"),e.qZA(),e._uU(498," method to append an item:"),e.qZA()(),e.TgZ(499,"tr")(500,"h3",3)(501,"b")(502,"pre")(503,"code"),e._uU(504,'\n                                    thislist = ["apple", "banana", "cherry"]\n                                    thislist.append("orange")\n                                    print(thislist)\n                                '),e.qZA()()()()()()(),e._UZ(505,"br"),e.TgZ(506,"h2"),e._uU(507,"Insert Items"),e.qZA(),e._uU(508," To insert a list item at a specified index, use the "),e.TgZ(509,"code"),e._uU(510,"insert()"),e.qZA(),e._uU(511," method. "),e._UZ(512,"br")(513,"br"),e._uU(514," The "),e.TgZ(515,"code"),e._uU(516,"insert()"),e.qZA(),e._uU(517," method inserts an item at the specified index: "),e._UZ(518,"br")(519,"br"),e.TgZ(520,"table",4)(521,"tbody")(522,"tr",5)(523,"h3")(524,"b"),e._uU(525,"EXAMPLE"),e.qZA(),e._UZ(526,"br"),e._uU(527,"Insert an item as the second position:"),e.qZA()(),e.TgZ(528,"tr")(529,"h3",3)(530,"b")(531,"pre")(532,"code"),e._uU(533,'\n                                    thislist = ["apple", "banana", "cherry"]\n                                    thislist.insert(1, "orange")\n                                    print(thislist)\n                                '),e.qZA()()()()()()(),e._UZ(534,"br"),e.TgZ(535,"h2"),e._uU(536,"Extend List"),e.qZA(),e._uU(537," To append elements from another list to the current list, use the "),e.TgZ(538,"code"),e._uU(539," extend() "),e.qZA(),e._uU(540," method. "),e._UZ(541,"br")(542,"br"),e.TgZ(543,"table",4)(544,"tbody")(545,"tr",5)(546,"h3")(547,"b"),e._uU(548,"EXAMPLE"),e.qZA(),e._UZ(549,"br"),e._uU(550,"Add the elements of tropical to thislist:"),e.qZA()(),e.TgZ(551,"tr")(552,"h3",3)(553,"b")(554,"pre")(555,"code"),e._uU(556,'\n                                    thislist = ["apple", "banana", "cherry"]\n                                    tropical = ["mango", "pineapple", "papaya"]\n                                    thislist.extend(tropical)\n                                    print(thislist)\n                                '),e.qZA()()()()()()(),e._UZ(557,"br")(558,"br"),e._uU(559," The elements will be added to the end of the list. "),e._UZ(560,"br"),e.TgZ(561,"h2"),e._uU(562,"Add Any Iterable"),e.qZA(),e._uU(563," The "),e.TgZ(564,"code"),e._uU(565," extend() "),e.qZA(),e._uU(566," method does not have to append lists, you can add any iterable object (tuples, sets, dictionaries etc.). "),e._UZ(567,"br")(568,"br"),e.TgZ(569,"table",4)(570,"tbody")(571,"tr",5)(572,"h3")(573,"b"),e._uU(574,"EXAMPLE"),e.qZA(),e._UZ(575,"br"),e._uU(576,"Add elements of a tuple to a list:"),e.qZA()(),e.TgZ(577,"tr")(578,"h3",3)(579,"b")(580,"pre")(581,"code"),e._uU(582,'\n                                    thislist = ["apple", "banana", "cherry"]\n                                    thistuple = ("kiwi", "orange")\n                                    thislist.extend(thistuple)\n                                    print(thislist)\n                                '),e.qZA()()()()()()()()(),e.TgZ(583,"mat-tab",9)(584,"div",2)(585,"h2"),e._uU(586,"Remove Specified Item"),e.qZA(),e._uU(587," The "),e.TgZ(588,"code",10),e._uU(589," remove() "),e.qZA(),e._uU(590," method removes the specified item. "),e._UZ(591,"br")(592,"br"),e.TgZ(593,"table",4)(594,"tbody")(595,"tr",5)(596,"h3")(597,"b"),e._uU(598,"EXAMPLE"),e.qZA(),e._UZ(599,"br"),e._uU(600,'Remove "banana":'),e.qZA()(),e.TgZ(601,"tr")(602,"h3",3)(603,"b")(604,"pre")(605,"code"),e._uU(606,'\n                                    thislist = ["apple", "banana", "cherry"]\n                                    thislist.remove("banana")\n                                    print(thislist)\n                                '),e.qZA()()()()()()(),e.TgZ(607,"h2"),e._uU(608,"Remove Specified Index"),e.qZA(),e._uU(609," The "),e.TgZ(610,"code",10),e._uU(611," pop() "),e.qZA(),e._uU(612," method removes the specified index. "),e._UZ(613,"br")(614,"br"),e.TgZ(615,"table",4)(616,"tbody")(617,"tr",5)(618,"h3")(619,"b"),e._uU(620,"EXAMPLE"),e.qZA(),e._UZ(621,"br"),e._uU(622,"Remove the second item:"),e.qZA()(),e.TgZ(623,"tr")(624,"h3",3)(625,"b")(626,"pre")(627,"code"),e._uU(628,'\n                                    thislist = ["apple", "banana", "cherry"]\n                                    thislist.pop(1)\n                                    print(thislist)\n                                '),e.qZA()()()()()()(),e._uU(629," If you do not specify the index, the "),e.TgZ(630,"code",10),e._uU(631," pop() "),e.qZA(),e._uU(632," method removes the last item. "),e._UZ(633,"br")(634,"br"),e.TgZ(635,"table",4)(636,"tbody")(637,"tr",5)(638,"h3")(639,"b"),e._uU(640,"EXAMPLE"),e.qZA(),e._UZ(641,"br"),e._uU(642,"Remove the last item:"),e.qZA()(),e.TgZ(643,"tr")(644,"h3",3)(645,"b")(646,"pre")(647,"code"),e._uU(648,'\n                                    thislist = ["apple", "banana", "cherry"]\n                                    thislist.pop()\n                                    print(thislist)\n                                '),e.qZA()()()()()()(),e._uU(649," The "),e.TgZ(650,"code",10),e._uU(651," del "),e.qZA(),e._uU(652," keyword also removes the specified index: "),e._UZ(653,"br")(654,"br"),e.TgZ(655,"table",4)(656,"tbody")(657,"tr",5)(658,"h3")(659,"b"),e._uU(660,"EXAMPLE"),e.qZA(),e._UZ(661,"br"),e._uU(662,"Remove the first item:"),e.qZA()(),e.TgZ(663,"tr")(664,"h3",3)(665,"b")(666,"pre")(667,"code"),e._uU(668,'\n                                    thislist = ["apple", "banana", "cherry"]\n                                    del thislist[0]\n                                    print(thislist)\n                                '),e.qZA()()()()()()(),e._uU(669," The "),e.TgZ(670,"code",10),e._uU(671," del "),e.qZA(),e._uU(672," keyword can also delete the list completely. "),e._UZ(673,"br")(674,"br"),e.TgZ(675,"table",4)(676,"tbody")(677,"tr",5)(678,"h3")(679,"b"),e._uU(680,"EXAMPLE"),e.qZA(),e._UZ(681,"br"),e._uU(682,"Delete the entire list:"),e.qZA()(),e.TgZ(683,"tr")(684,"h3",3)(685,"b")(686,"pre")(687,"code"),e._uU(688,'\n                                    thislist = ["apple", "banana", "cherry"]\n                                    del thislist\n                                '),e.qZA()()()()()()(),e.TgZ(689,"h2"),e._uU(690,"Clear the List"),e.qZA(),e._uU(691," The "),e.TgZ(692,"code",10),e._uU(693,"clear() "),e.qZA(),e._uU(694," method empties the list. "),e._UZ(695,"br"),e._uU(696," The list still remains, but it has no content. "),e._UZ(697,"br")(698,"br"),e.TgZ(699,"table",4)(700,"tbody")(701,"tr",5)(702,"h3")(703,"b"),e._uU(704,"EXAMPLE"),e.qZA(),e._UZ(705,"br"),e._uU(706,"Clear the list content:"),e.qZA()(),e.TgZ(707,"tr")(708,"h3",3)(709,"b")(710,"pre")(711,"code"),e._uU(712,'\n                                    thislist = ["apple", "banana", "cherry"]\n                                    thislist.clear()\n                                    print(thislist)\n                                '),e.qZA()()()()()()()()(),e.TgZ(713,"mat-tab",11)(714,"div",2)(715,"h2"),e._uU(716,"Loop Through a List"),e.qZA(),e._uU(717," You can loop through the list items by using a "),e.TgZ(718,"code",10),e._uU(719," for "),e.qZA(),e._uU(720," loop: "),e._UZ(721,"br")(722,"br"),e.TgZ(723,"table",4)(724,"tbody")(725,"tr",5)(726,"h3")(727,"b"),e._uU(728,"EXAMPLE"),e.qZA(),e._UZ(729,"br"),e._uU(730,"Print all items in the list, one by one:"),e.qZA()(),e.TgZ(731,"tr")(732,"h3",3)(733,"b")(734,"pre")(735,"code"),e._uU(736,'\n                                    thislist = ["apple", "banana", "cherry"]\n                                    for x in thislist:\n                                    print(x)\n                                '),e.qZA()()()()()()(),e.TgZ(737,"h2"),e._uU(738,"Loop Through the Index Numbers"),e.qZA(),e._UZ(739,"br"),e._uU(740," You can also loop through the list items by referring to their index number. "),e._UZ(741,"br"),e._uU(742," Use the "),e.TgZ(743,"code",10),e._uU(744," range() "),e.qZA(),e._uU(745," and "),e.TgZ(746,"code",10),e._uU(747," len() "),e.qZA(),e._uU(748," functions to create a suitable iterable. "),e._UZ(749,"br")(750,"br"),e.TgZ(751,"table",4)(752,"tbody")(753,"tr",5)(754,"h3")(755,"b"),e._uU(756,"EXAMPLE"),e.qZA(),e._UZ(757,"br"),e._uU(758,"Print all items by referring to their index number:"),e.qZA()(),e.TgZ(759,"tr")(760,"h3",3)(761,"b")(762,"pre")(763,"code"),e._uU(764,'\n                                    thislist = ["apple", "banana", "cherry"]\n                                    for i in range(len(thislist)):\n                                    print(thislist[i])\n                                '),e.qZA()()()()()()(),e._uU(765," The iterable created in the example above is "),e.TgZ(766,"code",10),e._uU(767," [0, 1, 2] "),e.qZA(),e._uU(768,". "),e._UZ(769,"br"),e.TgZ(770,"h2"),e._uU(771,"Using a While Loop"),e.qZA(),e._uU(772," You can loop through the list items by using a "),e.TgZ(773,"code",10),e._uU(774," while "),e.qZA(),e._uU(775," loop. "),e._UZ(776,"br"),e._uU(777," Use the "),e.TgZ(778,"code",10),e._uU(779," len() "),e.qZA(),e._uU(780," function to determine the length of the list, then start at 0 and loop your way through the list items by referring to their indexes. "),e._UZ(781,"br"),e._uU(782," Remember to increase the index by 1 after each iteration. "),e._UZ(783,"br")(784,"br"),e.TgZ(785,"table",4)(786,"tbody")(787,"tr",5)(788,"h3")(789,"b"),e._uU(790,"EXAMPLE"),e.qZA(),e._UZ(791,"br"),e._uU(792,"Print all items, using a "),e.TgZ(793,"code",10),e._uU(794," while "),e.qZA(),e._uU(795," loop to go through all the index numbers"),e.qZA()(),e.TgZ(796,"tr")(797,"h3",3)(798,"b")(799,"pre")(800,"code"),e._uU(801,'\n                                    thislist = ["apple", "banana", "cherry"]\n                                    i = 0\n                                    while i < len(thislist):\n                                    print(thislist[i])\n                                    i = i + 1\n                                '),e.qZA()()()()()()(),e.TgZ(802,"h2"),e._uU(803,"Looping Using List Comprehension"),e.qZA(),e._uU(804," Looping Using List Comprehension "),e._UZ(805,"br")(806,"br"),e.TgZ(807,"table",4)(808,"tbody")(809,"tr",5)(810,"h3")(811,"b"),e._uU(812,"EXAMPLE"),e.qZA(),e._UZ(813,"br"),e._uU(814,"A short hand "),e.TgZ(815,"code",10),e._uU(816," for "),e.qZA(),e._uU(817,"for loop that will print all items in a list:"),e.qZA()(),e.TgZ(818,"tr")(819,"h3",3)(820,"b")(821,"pre")(822,"code"),e._uU(823,'\n                                    thislist = ["apple", "banana", "cherry"]\n                                    [print(x) for x in thislist]\n                                '),e.qZA()()()()()()()()(),e.TgZ(824,"mat-tab",12)(825,"div",2)(826,"h2"),e._uU(827,"List Comprehension"),e.qZA(),e._uU(828,' List comprehension offers a shorter syntax when you want to create a new list based on the values of an existing list. Example: Based on a list of fruits, you want a new list, containing only the fruits with the letter "a" in the name. Without list comprehension you will have to write a '),e.TgZ(829,"code",10),e._uU(830," for "),e.qZA(),e._uU(831," statement with a conditional test inside: "),e._UZ(832,"br")(833,"br"),e.TgZ(834,"table",4)(835,"tbody")(836,"tr",5)(837,"h3")(838,"b"),e._uU(839,"EXAMPLE"),e.qZA(),e._UZ(840,"br"),e.qZA()(),e.TgZ(841,"tr")(842,"h3",3)(843,"b")(844,"pre")(845,"code"),e._uU(846,'\n                                    fruits = ["apple", "banana", "cherry", "kiwi", "mango"]\n                                    newlist = []\n                                    \n                                    for x in fruits:\n                                      if "a" in x:\n                                        newlist.append(x)\n                                    \n                                    print(newlist)\n                                '),e.qZA()()()()()()(),e._uU(847," With list comprehension you can do all that with only one line of code: "),e._UZ(848,"br")(849,"br"),e.TgZ(850,"table",4)(851,"tbody")(852,"tr",5)(853,"h3")(854,"b"),e._uU(855,"EXAMPLE"),e.qZA(),e._UZ(856,"br"),e.qZA()(),e.TgZ(857,"tr")(858,"h3",3)(859,"b")(860,"pre")(861,"code"),e._uU(862,'\n                                    fruits = ["apple", "banana", "cherry", "kiwi", "mango"]\n    \n                                    newlist = [x for x in fruits if "a" in x]\n    \n                                    print(newlist)\n                                '),e.qZA()()()()()()(),e.TgZ(863,"h2"),e._uU(864," The Syntax "),e.qZA(),e.TgZ(865,"pre",13)(866,"code"),e._uU(867,"\n                    newlist = [expression for item in iterable if condition == True]\n                    "),e.qZA()(),e._uU(868," The return value is a new list, leaving the old list unchanged. "),e.TgZ(869,"h2"),e._uU(870," Condition "),e.qZA(),e._uU(871," The condition is like a filter that only accepts the items that valuate to "),e.TgZ(872,"code",14),e._uU(873,"True"),e.qZA(),e._uU(874,". "),e._UZ(875,"br")(876,"br"),e.TgZ(877,"table",4)(878,"tbody")(879,"tr",5)(880,"h3")(881,"b"),e._uU(882,"EXAMPLE"),e.qZA(),e._UZ(883,"br"),e._uU(884,' Only accept items that are not "apple":'),e.qZA()(),e.TgZ(885,"tr")(886,"h3",3)(887,"b")(888,"pre")(889,"code"),e._uU(890,'\n                                    newlist = [x for x in fruits if x != "apple"]\n                                '),e.qZA()()()()()()(),e._uU(891," The condition if x != "),e.TgZ(892,"code",10),e._uU(893,' "apple" '),e.qZA(),e._uU(894," will return "),e.TgZ(895,"code",10),e._uU(896," True "),e.qZA(),e._uU(897,' for all elements other than "apple", making the new list contain all fruits except "apple". '),e._UZ(898,"br"),e._uU(899," The condition is optional and can be omitted: "),e._UZ(900,"br")(901,"br"),e.TgZ(902,"table",4)(903,"tbody")(904,"tr",5)(905,"h3")(906,"b"),e._uU(907,"EXAMPLE"),e.qZA(),e._UZ(908,"br"),e._uU(909,"With no if statement:"),e.qZA()(),e.TgZ(910,"tr")(911,"h3",3)(912,"b")(913,"pre")(914,"code"),e._uU(915,"\n                                    newlist = [x for x in fruits]\n                                "),e.qZA()()()()()()(),e.TgZ(916,"h2"),e._uU(917,"Iterable"),e.qZA(),e._uU(918," The iterable can be any iterable object, like a list, tuple, set etc. "),e._UZ(919,"br")(920,"br"),e.TgZ(921,"table",4)(922,"tbody")(923,"tr",5)(924,"h3")(925,"b"),e._uU(926,"EXAMPLE"),e.qZA(),e._UZ(927,"br"),e._uU(928,"You can use the "),e.TgZ(929,"code",10),e._uU(930," range() "),e.qZA(),e._uU(931," function to create an iterable:"),e.qZA()(),e.TgZ(932,"tr")(933,"h3",3)(934,"b")(935,"pre")(936,"code"),e._uU(937,"\n                                    newlist = [x for x in range(10)]\n                                "),e.qZA()()()()()()(),e._uU(938," Same example, but with a condition: "),e._UZ(939,"br")(940,"br"),e.TgZ(941,"table",4)(942,"tbody")(943,"tr",5)(944,"h3")(945,"b"),e._uU(946,"EXAMPLE"),e.qZA(),e._UZ(947,"br"),e._uU(948,"Accept only numbers lower than 5:"),e.qZA()(),e.TgZ(949,"tr")(950,"h3",3)(951,"b")(952,"pre")(953,"code"),e._uU(954,"\n                                    newlist = [x for x in range(10) if x < 5]\n                                "),e.qZA()()()()()()(),e.TgZ(955,"h2"),e._uU(956,"Expression"),e.qZA(),e._uU(957," The expression is the current item in the iteration, but it is also the outcome, which you can manipulate "),e._UZ(958,"br"),e._uU(959,"before it ends up like a list item in the new list: "),e._UZ(960,"br")(961,"br"),e.TgZ(962,"table",4)(963,"tbody")(964,"tr",5)(965,"h3")(966,"b"),e._uU(967,"EXAMPLE"),e.qZA(),e._UZ(968,"br"),e._uU(969,"Set the values in the new list to upper case:"),e.qZA()(),e.TgZ(970,"tr")(971,"h3",3)(972,"b")(973,"pre")(974,"code"),e._uU(975,"\n                                    newlist = [x.upper() for x in fruits]\n                                "),e.qZA()()()()()()(),e._uU(976," You can set the outcome to whatever you like: "),e._UZ(977,"br")(978,"br"),e.TgZ(979,"table",4)(980,"tbody")(981,"tr",5)(982,"h3")(983,"b"),e._uU(984,"EXAMPLE"),e.qZA(),e._UZ(985,"br"),e._uU(986,"Set all values in the new list to 'hello':"),e.qZA()(),e.TgZ(987,"tr")(988,"h3",3)(989,"b")(990,"pre")(991,"code"),e._uU(992,"\n                                    newlist = ['hello' for x in fruits]\n                                "),e.qZA()()()()()()(),e._uU(993," The expression can also contain conditions, not like a filter, but as a way to manipulate the outcome: "),e._UZ(994,"br")(995,"br"),e.TgZ(996,"table",4)(997,"tbody")(998,"tr",5)(999,"h3")(1e3,"b"),e._uU(1001,"EXAMPLE"),e.qZA(),e._UZ(1002,"br"),e._uU(1003,'Return "orange" instead of "banana":'),e.qZA()(),e.TgZ(1004,"tr")(1005,"h3",3)(1006,"b")(1007,"pre")(1008,"code"),e._uU(1009,'\n                                    newlist = [x if x != "banana" else "orange" for x in fruits]\n                                '),e.qZA()()()()()()(),e._uU(1010," The expression in the example above says: "),e.TgZ(1011,"i"),e._uU(1012,'"Return the item if it is not banana, if it is banana return orange".'),e.qZA()()(),e.TgZ(1013,"mat-tab",15)(1014,"div",2)(1015,"h2"),e._uU(1016,"Sort List Alphanumerically"),e.qZA(),e._uU(1017," List objects have a "),e.TgZ(1018,"code",10),e._uU(1019," sort() "),e.qZA(),e._uU(1020," method that will sort the list alphanumerically, ascending, by default: "),e._UZ(1021,"br")(1022,"br"),e.TgZ(1023,"table",4)(1024,"tbody")(1025,"tr",5)(1026,"h3")(1027,"b"),e._uU(1028,"EXAMPLE"),e.qZA(),e._UZ(1029,"br"),e._uU(1030,"Sort the list alphabetically:"),e.qZA()(),e.TgZ(1031,"tr")(1032,"h3",3)(1033,"b")(1034,"pre")(1035,"code"),e._uU(1036,'\n                                        thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]\n                                        thislist.sort()\n                                        print(thislist)\n                                    '),e.qZA()()()()()()(),e._UZ(1037,"br")(1038,"br"),e.TgZ(1039,"table",4)(1040,"tbody")(1041,"tr",5)(1042,"h3")(1043,"b"),e._uU(1044,"EXAMPLE"),e.qZA(),e._UZ(1045,"br"),e._uU(1046,"Sort the list numerically:"),e.qZA()(),e.TgZ(1047,"tr")(1048,"h3",3)(1049,"b")(1050,"pre")(1051,"code"),e._uU(1052,"\n                                        thislist = [100, 50, 65, 82, 23]\n                                        thislist.sort()\n                                        print(thislist)\n                                    "),e.qZA()()()()()()(),e.TgZ(1053,"h2"),e._uU(1054,"Sort Descending"),e.qZA(),e._uU(1055," To sort descending, use the keyword argument "),e.TgZ(1056,"code",10),e._uU(1057," reverse = True: "),e.qZA(),e._UZ(1058,"br")(1059,"br"),e.TgZ(1060,"table",4)(1061,"tbody")(1062,"tr",5)(1063,"h3")(1064,"b"),e._uU(1065,"EXAMPLE"),e.qZA(),e._UZ(1066,"br"),e._uU(1067,"Sort the list descending:"),e.qZA()(),e.TgZ(1068,"tr")(1069,"h3",3)(1070,"b")(1071,"pre")(1072,"code"),e._uU(1073,'\n                                        thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]\n                                        thislist.sort(reverse = True)\n                                        print(thislist)\n                                    '),e.qZA()()()()()()(),e._UZ(1074,"br")(1075,"br"),e.TgZ(1076,"table",4)(1077,"tbody")(1078,"tr",5)(1079,"h3")(1080,"b"),e._uU(1081,"EXAMPLE"),e.qZA(),e._UZ(1082,"br"),e._uU(1083,"Sort the list descending:"),e.qZA()(),e.TgZ(1084,"tr")(1085,"h3",3)(1086,"b")(1087,"pre")(1088,"code"),e._uU(1089,"\n                                        thislist = [100, 50, 65, 82, 23]\n                                        thislist.sort(reverse = True)\n                                        print(thislist\n                                    "),e.qZA()()()()()()(),e.TgZ(1090,"h2"),e._uU(1091,"Customize Sort Function"),e.qZA(),e._uU(1092," You can also customize your own function by using the keyword argument "),e.TgZ(1093,"code",10),e._uU(1094,"key = function."),e.qZA(),e._UZ(1095,"br"),e._uU(1096," The function will return a number that will be used to sort the list (the lowest number first): "),e._UZ(1097,"br")(1098,"br"),e.TgZ(1099,"table",4)(1100,"tbody")(1101,"tr",5)(1102,"h3")(1103,"b"),e._uU(1104,"EXAMPLE"),e.qZA(),e._UZ(1105,"br"),e._uU(1106,"Sort the list based on how close the number is to 50:"),e.qZA()(),e.TgZ(1107,"tr")(1108,"h3",3)(1109,"b")(1110,"pre")(1111,"code"),e._uU(1112,"\n                                        def myfunc(n):\n                                        return abs(n - 50)\n    \n                                        thislist = [100, 50, 65, 82, 23]\n                                        thislist.sort(key = myfunc)\n                                        print(thislist)\n                                    "),e.qZA()()()()()()(),e.TgZ(1113,"h2"),e._uU(1114,"Case Insensitive Sort"),e.qZA(),e._uU(1115," By default the "),e.TgZ(1116,"code",10),e._uU(1117," sort() "),e.qZA(),e._uU(1118," method is case sensitive, resulting in all capital letters being sorted before lower case letters: "),e._UZ(1119,"br")(1120,"br"),e.TgZ(1121,"table",4)(1122,"tbody")(1123,"tr",5)(1124,"h3")(1125,"b"),e._uU(1126,"EXAMPLE"),e.qZA(),e._UZ(1127,"br"),e._uU(1128,"Case sensitive sorting can give an unexpected result:"),e.qZA()(),e.TgZ(1129,"tr")(1130,"h3",3)(1131,"b")(1132,"pre")(1133,"code"),e._uU(1134,'\n                                        thislist = ["banana", "Orange", "Kiwi", "cherry"]\n                                        thislist.sort()\n                                        print(thislist)\n                                    '),e.qZA()()()()()()(),e._uU(1135," Luckily we can use built-in functions as key functions when sorting a list. "),e._UZ(1136,"br"),e._uU(1137," So if you want a case-insensitive sort function, use str.lower as a key function: "),e._UZ(1138,"br")(1139,"br"),e.TgZ(1140,"table",4)(1141,"tbody")(1142,"tr",5)(1143,"h3")(1144,"b"),e._uU(1145,"EXAMPLE"),e.qZA(),e._UZ(1146,"br"),e._uU(1147,"Perform a case-insensitive sort of the list:"),e.qZA()(),e.TgZ(1148,"tr")(1149,"h3",3)(1150,"b")(1151,"pre")(1152,"code"),e._uU(1153,'\n                                        thislist = ["banana", "Orange", "Kiwi", "cherry"]\n                                        thislist.sort(key = str.lower)\n                                        print(thislist)\n                                    '),e.qZA()()()()()()(),e.TgZ(1154,"h2"),e._uU(1155,"Reverse Order"),e.qZA(),e._uU(1156," What if you want to reverse the order of a list, regardless of the alphabet? "),e._UZ(1157,"br"),e._uU(1158," The "),e.TgZ(1159,"code",10),e._uU(1160," reverse() "),e.qZA(),e._uU(1161," method reverses the current sorting order of the elements. "),e._UZ(1162,"br")(1163,"br"),e.TgZ(1164,"table",4)(1165,"tbody")(1166,"tr",5)(1167,"h3")(1168,"b"),e._uU(1169,"EXAMPLE"),e.qZA(),e._UZ(1170,"br"),e._uU(1171,"Reverse the order of the list items:"),e.qZA()(),e.TgZ(1172,"tr")(1173,"h3",3)(1174,"b")(1175,"pre")(1176,"code"),e._uU(1177,'\n                                        thislist = ["banana", "Orange", "Kiwi", "cherry"]\n                                        thislist.reverse()\n                                        print(thislist)\n                                    '),e.qZA()()()()()()()()(),e.TgZ(1178,"mat-tab",16)(1179,"div",2)(1180,"h2"),e._uU(1181,"Copy a List"),e.qZA(),e._uU(1182," You cannot copy a list simply by typing "),e.TgZ(1183,"code",10),e._uU(1184,"list2 = list1"),e.qZA(),e._uU(1185,", because: "),e.TgZ(1186,"code",10),e._uU(1187," list2 "),e.qZA(),e._uU(1188," will only be a reference to "),e.TgZ(1189,"code",10),e._uU(1190," list1 "),e.qZA(),e._uU(1191,", and changes made in "),e.TgZ(1192,"code",10),e._uU(1193,"list1"),e.qZA(),e._uU(1194,"list1 will automatically also be made in "),e.TgZ(1195,"code",10),e._uU(1196,"list2"),e.qZA(),e._uU(1197,". "),e._UZ(1198,"br"),e._uU(1199," There are ways to make a copy, one way is to use the built-in List method "),e.TgZ(1200,"code",10),e._uU(1201,"copy()"),e.qZA(),e._uU(1202,". "),e._UZ(1203,"br")(1204,"br"),e.TgZ(1205,"table",4)(1206,"tbody")(1207,"tr",5)(1208,"h3")(1209,"b"),e._uU(1210,"EXAMPLE"),e.qZA(),e._UZ(1211,"br"),e._uU(1212,"Make a copy of a list with the "),e.TgZ(1213,"code",10),e._uU(1214," copy() "),e.qZA(),e._uU(1215," method:"),e.qZA()(),e.TgZ(1216,"tr")(1217,"h3",3)(1218,"b")(1219,"pre")(1220,"code"),e._uU(1221,'\n                                        thislist = ["apple", "banana", "cherry"]\n                                        mylist = thislist.copy()\n                                        print(mylist)\n                                    '),e.qZA()()()()()()(),e._uU(1222," Another way to make a copy is to use the built-in method "),e.TgZ(1223,"code",10),e._uU(1224,"list()"),e.qZA(),e._uU(1225,". "),e._UZ(1226,"br")(1227,"br"),e.TgZ(1228,"table",4)(1229,"tbody")(1230,"tr",5)(1231,"h3")(1232,"b"),e._uU(1233,"EXAMPLE"),e.qZA(),e._UZ(1234,"br"),e._uU(1235,"Make a copy of a list with the "),e.TgZ(1236,"code",10),e._uU(1237," List() "),e.qZA(),e._uU(1238," method:"),e.qZA()(),e.TgZ(1239,"tr")(1240,"h3",3)(1241,"b")(1242,"pre")(1243,"code"),e._uU(1244,'\n                                        thislist = ["apple", "banana", "cherry"]\n                                        mylist = list(thislist)\n                                        print(mylist)\n                                    '),e.qZA()()()()()()()()(),e.TgZ(1245,"mat-tab",17)(1246,"div",2)(1247,"h2"),e._uU(1248,"Join Two Lists"),e.qZA(),e._uU(1249," There are several ways to join, or concatenate, two or more lists in Python. "),e._UZ(1250,"br"),e._uU(1251," One of the easiest ways are by using the "),e.TgZ(1252,"code",10),e._uU(1253," + "),e.qZA(),e._uU(1254," operator. "),e._UZ(1255,"br")(1256,"br"),e.TgZ(1257,"table",4)(1258,"tbody")(1259,"tr",5)(1260,"h3")(1261,"b"),e._uU(1262,"EXAMPLE"),e.qZA(),e._UZ(1263,"br"),e._uU(1264,"Join two list:"),e.qZA()(),e.TgZ(1265,"tr")(1266,"h3",3)(1267,"b")(1268,"pre")(1269,"code"),e._uU(1270,'\n                                        list1 = ["a", "b", "c"]\n                                        list2 = [1, 2, 3]\n    \n                                        list3 = list1 + list2\n                                        print(list3)\n                                    '),e.qZA()()()()()()(),e._uU(1271," Another way to join two lists is by appending all the items from list2 into list1, one by one: "),e._UZ(1272,"br")(1273,"br"),e.TgZ(1274,"table",4)(1275,"tbody")(1276,"tr",5)(1277,"h3")(1278,"b"),e._uU(1279,"EXAMPLE"),e.qZA(),e._UZ(1280,"br"),e._uU(1281,"Append list2 into list1:"),e.qZA()(),e.TgZ(1282,"tr")(1283,"h3",3)(1284,"b")(1285,"pre")(1286,"code"),e._uU(1287,'\n                                    list1 = ["a", "b" , "c"]\n                                    list2 = [1, 2, 3]\n    \n                                    for x in list2:\n                                    list1.append(x)\n    \n                                    print(list1)\n                                '),e.qZA()()()()()()(),e._uU(1288," Or you can use the "),e.TgZ(1289,"code",10),e._uU(1290," extend()"),e.qZA(),e._uU(1291," method, which purpose is to add elements from one list to another list: "),e._UZ(1292,"br")(1293,"br"),e.TgZ(1294,"table",4)(1295,"tbody")(1296,"tr",5)(1297,"h3")(1298,"b"),e._uU(1299,"EXAMPLE"),e.qZA(),e._UZ(1300,"br"),e._uU(1301,"Use the "),e.TgZ(1302,"code",10),e._uU(1303,"extend()"),e.qZA(),e._uU(1304," method to add list2 at the end of list1:"),e.qZA()(),e.TgZ(1305,"tr")(1306,"h3",3)(1307,"b")(1308,"pre")(1309,"code"),e._uU(1310,'\n                                    list1 = ["a", "b" , "c"]\n                                    list2 = [1, 2, 3]\n    \n                                    list1.extend(list2)\n                                    print(list1)\n                                '),e.qZA()()()()()()()()(),e.TgZ(1311,"mat-tab",18)(1312,"div",2)(1313,"h2"),e._uU(1314,"List Method"),e.qZA(),e.TgZ(1315,"table")(1316,"tbody")(1317,"tr",19)(1318,"th")(1319,"h2",20)(1320,"u"),e._uU(1321,"Method"),e.qZA()(),e.TgZ(1322,"tr"),e._uU(1323,"append()"),e.qZA(),e._UZ(1324,"br"),e.TgZ(1325,"tr"),e._uU(1326,"clear()"),e.qZA(),e._UZ(1327,"br"),e.TgZ(1328,"tr"),e._uU(1329,"copy()"),e.qZA(),e._UZ(1330,"br"),e.TgZ(1331,"tr"),e._uU(1332,"count()"),e.qZA(),e._UZ(1333,"br"),e.TgZ(1334,"tr"),e._uU(1335,"extend()"),e.qZA(),e._UZ(1336,"br"),e.TgZ(1337,"tr"),e._uU(1338,"index()"),e.qZA(),e._UZ(1339,"br"),e.TgZ(1340,"tr"),e._uU(1341,"insert()"),e.qZA(),e._UZ(1342,"br"),e.TgZ(1343,"tr"),e._uU(1344,"pop()"),e.qZA(),e._UZ(1345,"br"),e.TgZ(1346,"tr"),e._uU(1347,"remove()"),e.qZA(),e._UZ(1348,"br"),e.TgZ(1349,"tr"),e._uU(1350,"reverse()"),e.qZA(),e._UZ(1351,"br"),e.TgZ(1352,"tr"),e._uU(1353,"sort()"),e.qZA()(),e._UZ(1354,"br")(1355,"br"),e.TgZ(1356,"th"),e._UZ(1357,"br")(1358,"br"),e.qZA(),e._UZ(1359,"br")(1360,"br"),e.TgZ(1361,"th")(1362,"h2",20)(1363,"u"),e._uU(1364,"Description"),e.qZA()(),e.TgZ(1365,"tr"),e._uU(1366,"Adds an element at the end of the list"),e.qZA(),e._UZ(1367,"br"),e.TgZ(1368,"tr"),e._uU(1369,"Removes all the elements from the list"),e.qZA(),e._UZ(1370,"br"),e.TgZ(1371,"tr"),e._uU(1372,"Returns a copy of the list"),e.qZA(),e._UZ(1373,"br"),e.TgZ(1374,"tr"),e._uU(1375,"Returns the number of elements with the specified value"),e.qZA(),e._UZ(1376,"br"),e.TgZ(1377,"tr"),e._uU(1378,"Add the elements of a list (or any iterable), to the end of the current list"),e.qZA(),e._UZ(1379,"br"),e.TgZ(1380,"tr"),e._uU(1381,"Returns the index of the first element with the specified value"),e.qZA(),e._UZ(1382,"br"),e.TgZ(1383,"tr"),e._uU(1384,"Adds an element at the specified position"),e.qZA(),e._UZ(1385,"br"),e.TgZ(1386,"tr"),e._uU(1387,"Removes the element at the specified position"),e.qZA(),e._UZ(1388,"br"),e.TgZ(1389,"tr"),e._uU(1390,"Removes the item with the specified value"),e.qZA(),e._UZ(1391,"br"),e.TgZ(1392,"tr"),e._uU(1393,"Reverses the order of the list"),e.qZA(),e._UZ(1394,"br"),e.TgZ(1395,"tr"),e._uU(1396,"Sorts the list"),e.qZA()()()()()()()()())},dependencies:[s.uX,s.SP],styles:[".bg[_ngcontent-%COMP%]{background-color:#fff}.bg2[_ngcontent-%COMP%]{background-color:#c5c1c1}.align[_ngcontent-%COMP%]{text-align:center;font-size:xx-large;font-weight:700}.large[_ngcontent-%COMP%]{font-size:larger}.fontsize[_ngcontent-%COMP%]{font-size:large;background-color:#d3d3d3}.listm[_ngcontent-%COMP%]{text-align:justify}.border[_ngcontent-%COMP%]{border:rgb(1,1,1);border-bottom:1px solid #000000;background-color:azure}"]}),t})()}];let h=(()=>{class t{}return t.\u0275fac=function(i){return new(i||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[o.Bz.forChild(u),o.Bz]}),t})(),Z=(()=>{class t{}return t.\u0275fac=function(i){return new(i||t)},t.\u0275mod=e.oAB({type:t}),t.\u0275inj=e.cJS({imports:[l.ez,h,s.Nh]}),t})()}}]);